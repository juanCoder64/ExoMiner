# Conduct preprocessing run that creates a TFRecord dataset; uses GNU parallel to generate multiple processes, each one
# conducting the preprocessing of a subset of the examples.

# initialize conda and activate conda environment
source activate exoplnt_dl_tf2_13

# set path to codebase root directory
export PYTHONPATH=codebase/

# create output directory for preprocessing results
OUTPUT_DIR=null
mkdir -p $OUTPUT_DIR

# create main output job file
JOB_FP=$OUTPUT_DIR/output_job.txt

# copy PBS script
PBS_SCRIPT_FP=$(realpath $0)
cp $PBS_SCRIPT_FP $JOB_FP

# copy codebase git commit hash
COMMIT_HASH=$(git -C $PYTHONPATH rev-parse HEAD)
echo "Git hash commit: $COMMIT_HASH"  >> $JOB_FP

LC_PREPROCESSING_DIR="$PYTHONPATH"/src_preprocessing/lc_preprocessing/

# script file path
SCRIPT_FP=$LC_PREPROCESSING_DIR/generate_input_records.py
# config file path
CONFIG_FP=$LC_PREPROCESSING_DIR/config_preprocessing.yaml
# job script for running preprocessing pipeline
PREPROCESS_SH_SCRIPT=$LC_PREPROCESSING_DIR/preprocessing_job.sh

# number of total jobs
NUM_TOTAL_JOBS=384
# number of jobs run simultaneously in one node
NUM_JOBS_PARALLEL=128

# run with GNU parallel; exclude --sshloginfile argument to use one single core setup
# seq 0 $((NUM_TOTAL_JOBS - 1)) | parallel -j $NUM_JOBS_PARALLEL --sshloginfile "$PBS_NODEFILE" "$PREPROCESS_SH_SCRIPT {} $OUTPUT_DIR $SCRIPT_FP $CONFIG_FP $NUM_TOTAL_JOBS"
seq 0 $((NUM_TOTAL_JOBS - 1)) | parallel -j $NUM_JOBS_PARALLEL "$PREPROCESS_SH_SCRIPT {} $OUTPUT_DIR $SCRIPT_FP $CONFIG_FP $NUM_TOTAL_JOBS"
