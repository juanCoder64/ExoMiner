# Run train, eval experiment in parallel (multiple models run at the same time) on a single node with multiple GPUs and
# using a combination of GNU parallel and job array; option for multi-node setup.

# initialize conda and activate conda environment
module use -a /swbuild/analytix/tools/modulefiles
# non-GH nodes
# module load miniconda3/v4
# source activate exoplnt_dl_tf2_13
# GH nodes
module load miniconda3/gh2
source activate exoplnt_dl_gh

# path to codebase root directory
export PYTHONPATH=codebase/

# config file path
CONFIG_FP=$PYTHONPATH/src/train/config_train.yaml
# job script for running the Python application
RUN_SH_SCRIPT=$PYTHONPATH/src/train/run_train_iter.sh

# output directory
OUTPUT_DIR=

N_MODELS=10  # total number of models to be trained

# number of GPUs to be used by this job array
N_GPUS_TOTAL=1

# number of total jobs per job in job array
NUM_TOTAL_JOBS=3  # $((1 * 4))
# number of jobs run simultaneously
NUM_JOBS_PARALLEL=1

# create main output job file
JOB_FP=$OUTPUT_DIR/output_job.txt

# copy PBS script
PBS_SCRIPT_FP=$(realpath $0)
cp $PBS_SCRIPT_FP $JOB_FP

# copy codebase git commit hash
COMMIT_HASH=$(git -C $PYTHONPATH rev-parse HEAD)
echo "Git hash commit: $COMMIT_HASH"  >> $JOB_FP

mkdir -p $OUTPUT_DIR

# run with GNU parallel
# seq 0 $((NUM_TOTAL_JOBS - 1)) | parallel -j $NUM_JOBS_PARALLEL "$RUN_SH_SCRIPT {} $PBS_ARRAY_INDEX $CONFIG_FP $OUTPUT_DIR $N_GPUS_TOTAL $N_MODELS"
# testing multi-node setup...
seq 0 $((NUM_TOTAL_JOBS - 1)) | parallel -j $NUM_JOBS_PARALLEL --sshloginfile $PBS_NODEFILE "$RUN_SH_SCRIPT {} 0 $CONFIG_FP $OUTPUT_DIR $N_GPUS_TOTAL $N_MODELS"
