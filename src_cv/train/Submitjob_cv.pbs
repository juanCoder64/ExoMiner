# Run CV experiment in parallel (multiple iterations at the same time) on a single GPU node with multiple GPUs and
# using a combination of GNU parallel and job array
#PBS -S /bin/bash
#PBS -N cv_exoplanet
#PBS -l walltime=72:00:00
# DSG_GPU V100 nodes --------
#PBS -l select=1:ncpus=36:ngpus=4:mem=360g:model=sky_gpu
# place the chunk wherever it is possible for the requested resources; share resources with other people
#PBS -l place=free:excl
#PBS -q dsg_gpu@pbspl4
# Cabeus A100 GPU nodes -------
# PBS -l select=1:ncpus=16:mem=128g:ngpus=1:model=mil_a100
# PBS -l place=scatter:shared
# PBS -q p_gpu_normal@pbspl4
# GH nodes --------
# PBS -lselect=1:ncpus=72:ngpus=1:model=gh200
# PBS -q dsggh_gpu@pbs05a
#PBS -o /home6/msaragoc/jobs/Kepler-TESS_exoplanet/job_cv_tess_2min_exominernew.out
#PBS -e /home6/msaragoc/jobs/Kepler-TESS_exoplanet/job_cv_tess_2min_exominernew.err
#PBS -W group_list=a1509
# PBS -W group_list=s2857
#PBS -m bea
#PBS -J 0-1

# PBS_ARRAY_INDEX=0
# export TMPDIR=/var/tmp/pbs.34282.pbs05a.gh.nas.nasa.gov
# mkdir -p "$TMPDIR"

# initialize conda and activate conda environment
module use -a /swbuild/analytix/tools/modulefiles
# module load miniconda3/gh2
# source activate exoplnt_dl_gh_nfs
module load miniconda3/v4
source activate exoplnt_dl_tf2_13
# source activate exoplnt_dl_tf2_16_nfs

export LD_LIBRARY_PATH=$CONDA_PREFIX/lib:$LD_LIBRARY_PATH

# set path to codebase root directory
export PYTHONPATH=/home6/msaragoc/work_dir/Kepler-TESS_exoplanet/codebase/

# config file path
CONFIG_FP=/home6/msaragoc/work_dir/Kepler-TESS_exoplanet/codebase/src_cv/train/config_cv_train.yaml
# job script for running the Python application
RUN_SH_SCRIPT=/nobackupp19/msaragoc/work_dir/Kepler-TESS_exoplanet/codebase/src_cv/train/run_cv_iter_modular.sh
# output directory
OUTPUT_DIR=/home6/msaragoc/work_dir/Kepler-TESS_exoplanet/experiments/tess_spoc_ffi/cv_tess-spoc-ffi_s36-s72_multisector_s56-s69_with2mindata_valffionly_2valfolds_3-6-2025_1027
mkdir -p $OUTPUT_DIR

# create main output job file
JOB_FP=$OUTPUT_DIR/output_job.txt

# copy PBS script
PBS_SCRIPT_FP=$(realpath $0)
cp $PBS_SCRIPT_FP $JOB_FP

# copy codebase git commit hash
COMMIT_HASH=$(git -C $PYTHONPATH rev-parse HEAD)
echo "Git hash commit: $COMMIT_HASH"  >> $JOB_FP

N_CV_ITERS=5  # number of CV folds/iterations
N_MODELS_PER_CV_ITER=10  # number of models to train per CV iteration

# number of GPUs to be used by this job array
N_GPUS_TOTAL=4

# number of total jobs per job in job array
# NUM_TOTAL_JOBS=$((1 * 4))
NUM_TOTAL_JOBS=4
# number of jobs run simultaneously
NUM_JOBS_PARALLEL=4

# run with GNU parallel
# run CV sh script
seq 0 $((NUM_TOTAL_JOBS - 1)) | parallel -j $NUM_JOBS_PARALLEL "$RUN_SH_SCRIPT {} $PBS_ARRAY_INDEX $CONFIG_FP $OUTPUT_DIR $N_GPUS_TOTAL $N_CV_ITERS $N_MODELS_PER_CV_ITER"

# testing multi-node setup...
# seq 0 $((NUM_TOTAL_JOBS - 1)) | parallel -j $NUM_JOBS_PARALLEL --sshloginfile $PBS_NODEFILE "$RUN_SH_SCRIPT {} 0 $CONFIG_FP $OUTPUT_DIR $N_GPUS_TOTAL $N_CV_ITERS $N_MODELS_PER_CV_ITER"
