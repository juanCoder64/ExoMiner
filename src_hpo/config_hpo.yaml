worker_id: null
rnd_seed: 42
paths:
  experiment_dir: null
  # dictionary containing keys 'train', 'val', and 'test' that map to a list of TFRecord filepaths
  datasets_fps: /home6/msaragoc/work_dir/Kepler-TESS_exoplanet/data/tfrecords/Kepler/Q1-Q17_DR25/tfrecords_kepler_q1q17dr25_9-30-2024_1730_data/cv_tfrecords_kepler_spoc_q1q17dr25_10-3-2024_1227_tcedikcorat/tfrecords/eval_normalized/cv_iterations.yaml
  prev_run_dir: null  # warm-up from previous HPO run

optimizer: bohb  # types of hyperparameter optimizers available: 'random_search', 'bohb'
# Hyperband parameters ----
# if minimum and maximum budgets are set to the same value, then BOHB becomes BO (Bayesian optimization)
min_budget: 2  # 6  # budget in this case is number of epochs a given configuration is evaluated on
max_budget: 4  # 50
n_iterations: 20
eta: 2  # downsampling rate, must be greater or equal to 2
# BOHB and BO parameters ----
bohb_params:
  top_n_percent: 15
  num_samples: 64
  random_fraction: 0.333
  bandwidth_factor: 3
  min_bandwidth: 1.0e-3
hpo_loss: auc_pr  # metric used to evaluate the performance of a given configuration on the validation set
# number of models trained per configuration evaluated on a given budget
# used to decrease the variability due to random weights initialization
ensemble_n: 2
nic_name: ib0  # 'ib0' (infiniband, use in the HECC cluster), 'lo' (local on Linux systems); 'en0' (local on MacOS)

draw_plots: true  # draw loss and metric curves for trained models

# set general architecture of the model based on implementations under models.models_keras.py
model_architecture: ExoMiner_JointLocalFlux

config:
  # branches used in ExoMiner
  # branches with scalars have the option not to add scalars by setting `scalars` field to null
  # comment a branch to not use it
  conv_branches:  # null

    local_unfolded_flux:
      views:
        - unfolded_local_flux_view_fluxnorm
      scalars:   # null
#        - tce_num_transits_obs_norm
        - tce_num_transits_norm
        # - mission

    global_flux:
      views:
        - global_flux_view_fluxnorm
        - global_flux_view_fluxnorm_var
      scalars:
         - flux_global_stat_abs_min_norm

    local_flux:
      views:
        - local_flux_view_fluxnorm
        - local_flux_view_fluxnorm_var
      scalars: # null
#        - transit_depth_norm
#        - tce_depth_norm
        - flux_local_stat_abs_min
         # - mission

    local_weak_secondary:
      views:
#        - local_weak_secondary_view_fluxnorm
        - local_weak_secondary_view_selfnorm
        - local_weak_secondary_view_selfnorm_var
      #         - local_weak_secondary_view_max_flux-wks_norm
      scalars:
        - tce_ptemp_stat_norm
        - tce_albedo_stat_norm
        - tce_maxmes_norm
        - flux_weak_secondary_local_stat_abs_min_norm
#        - wst_depth_norm
#        - tce_prad_norm
        # - mission

    local_centroid:
      views:
        - local_centr_view_std_noclip
        - local_centr_view_std_noclip_var
      scalars:  # null
#       - tce_fwm_stat_norm  # kepler only
#       - mag_cat_norm
        - mag_shift_norm
        # - mission

    local_odd_even:
      views:
        - local_flux_odd_view_fluxnorm
        - local_flux_odd_view_fluxnorm_var
        - local_flux_even_view_fluxnorm
        - local_flux_even_view_fluxnorm_var
      scalars:
        - flux_odd_local_stat_abs_min_norm
        - flux_even_local_stat_abs_min_norm
#        # - mission
##        - odd_se_oot_norm
##        - even_se_oot_norm

    momentum_dump:
      views:
        - local_momentum_dump_view
        - local_momentum_dump_view_var
      scalars: null

    flux_trend:
      views:
        - flux_trend_global_norm
        - flux_trend_global_norm_var
      scalars:
        - flux_trend_global_stat_max_norm
        - flux_trend_global_stat_min_norm

    flux_periodogram:
      views:
        - pgram_smooth_norm
        - pgram_tpm_smooth_norm
      scalars:
        - pgram_smooth_max_power_norm
        - pgram_tpm_smooth_max_power_norm

#        # - mission
  scalar_branches: # null
    stellar:
      - tce_sdens_norm
      - tce_steff_norm
      - tce_smet_norm
      - tce_slogg_norm
      - tce_smass_norm
      - tce_sradius_norm
      - ruwe_norm
#      # - mission

    dv_tce_fit:
      - boot_fap_norm
      - tce_cap_stat_norm
      - tce_hap_stat_norm
      ##      - tce_cap_hap_stat_diff_norm
      ##      - tce_rb_tcount0n_norm  # kepler only
      - tce_period_norm
      - tce_max_mult_ev_norm
      - tce_max_sngle_ev_norm
      - tce_robstat_norm
      - tce_model_chisq_norm
      - tce_prad_norm
#      # - mission

  diff_img_branch: # null
    imgs:
      - diff_imgs_std_trainset
      - oot_imgs_std_trainset
      #       - diff_imgs_stdnorm
      #       - oot_imgs_stdnorm
      - target_imgs
    imgs_scalars:
      - quality
    scalars:
      - mag_shift_norm
      - tce_dikco_msky_norm
      - tce_dikco_msky_err_norm
      #       - tce_dicco_msky_norm
      #       - tce_dicco_msky_err_norm
      # - mission

  transformer_branches: null
    ##      global:
    ##        - unfolded_global_flux_view_fluxnorm
    #    local:
    #      - unfolded_local_flux_view_fluxnorm

  # global branch hyperparameters ----
  num_glob_conv_blocks: 3
  glob_conv_ls_per_block: 5
  init_glob_conv_filters: 3
  kernel_size_glob: 5
  pool_size_glob: 8

  # local branch hyperparameters ------
  num_loc_conv_blocks: 2
  loc_conv_ls_per_block: 1
  init_loc_conv_filters: 2
  kernel_size_loc: 6
  pool_size_loc: 4

  # periodogram branch hyperparameters -----
  num_pgram_conv_blocks: 1
  pgram_conv_ls_per_block: 6
  init_pgram_conv_filters: 5
  kernel_size_pgram: 6
  pool_size_pgram: 4

  # difference image hyperparameters ---------
  num_diffimg_conv_blocks: 4
  diffimg_conv_ls_per_block: 4
  init_diffimg_conv_filters: 1
  kernel_size_diffimg: [ 3, 3, 1 ]
  pool_size_diffimg: [ 2, 2, 1 ]
  num_fc_diff_units: 12

  # shared conv hyperparameters ----
  num_fc_conv_units: 6
  dropout_rate_fc_conv: 0.1211390996398814

  # fc block hyperparameters
  init_fc_neurons: 32
  dropout_rate: 0.021491238286347598
  num_fc_layers: 1
  decay_rate: null  # for l2-regularization

  # shared hyperparameters --------
  non_lin_fn: prelu
  weight_initializer: null
  kernel_stride: 1
  pool_stride: 1

  # optimization hyperparameters ------
  optimizer: 'Adam'
  #  'lr': 1.0e-5
#  batch_size: 64  # used in field training; deprecated
  force_softmax: false
  #  use_kepler_ce: false

  # loss hyperparameters
  multi_class: false  # switch to multiclass classification

  # other hyperparameters -----
  batch_norm: false  # apply batch norm before FC block to all concatenated output features extracted from the branches

  # transformer hyperparameters ---------
  # if true, will use transformer branches. Otherwise, will use convolutional branches for unfolded flux data
  use_transformer: false  # set to true when using N-d data (N>1)
  num_transformer_blocks: 2
  head_size: 256
  num_heads: 4
  ff_dim: 4
  dropout_rate_transformer: 0.03
  # can either be bin_average_pooling, phase_average_pooling, or flat, or time distributed
  # output will be [301/31], [20], and [20 * 301/31] respectively
  # if time_encoding = true, shape of bin_average_pooling and flat increase by a factor of 3
  transformer_output: 'flat'
  time_encoding: true
  # transformer head
  global-num_units_transformer_fc_layers: [ 4 ]
  local-num_units_transformer_fc_layers: [ 4 ]
  dropout_rate_trans_fc: 0.03

features_set: # each key-value pair is feature_name: {'dim': feature_dim, 'dtype': feature_dtype}

  # unfolded flux
  unfolded_local_flux_view_fluxnorm: { 'dim': [ 20, 31 ], 'dtype': float }
#  #  unfolded_global_flux_view_fluxnorm: { 'dim': [ 20, 301 ], 'dtype': float }
  tce_num_transits_norm: { 'dim': [ 1, ], 'dtype': float }
#  tce_num_transits_obs_norm: { 'dim': [ 1, ], 'dtype': float }

  # flux
  global_flux_view_fluxnorm: { 'dim': [ 301, 1 ], 'dtype': float }
  global_flux_view_fluxnorm_var: { 'dim': [ 301, 1 ], 'dtype': float }
  flux_global_stat_abs_min_norm: { 'dim': [ 1, ], 'dtype': float }

  local_flux_view_fluxnorm: { 'dim': [ 31, 1 ], 'dtype': float }
  local_flux_view_fluxnorm_var: { 'dim': [ 31, 1 ], 'dtype': float }
  flux_local_stat_abs_min: { 'dim': [ 1, ], 'dtype': float }
#  transit_depth_norm: { 'dim': [ 1, ], 'dtype': float }
#  tce_depth_norm: { 'dim': [ 1, ], 'dtype': float }

#  # odd-even flux related features
  local_flux_odd_view_fluxnorm: { 'dim': [ 31, 1 ], 'dtype': float }
  local_flux_even_view_fluxnorm: { 'dim': [ 31, 1 ], 'dtype': float }
  local_flux_odd_view_fluxnorm_var: { 'dim': [ 31, 1 ], 'dtype': float }
  local_flux_even_view_fluxnorm_var: { 'dim': [ 31, 1 ], 'dtype': float }
  flux_even_local_stat_abs_min_norm: {'dim': [1,], 'dtype': float}
  flux_odd_local_stat_abs_min_norm: {'dim': [1,], 'dtype': float}
#  tce_bin_oedp_stat_norm: {'dim': [1,], 'dtype': float}
###    odd_std_oot_bin_norm: {'dim': [1,], 'dtype': float}
###    even_std_oot_bin_norm: {'dim': [1,], 'dtype': float}
###  odd_se_oot_norm: { 'dim': [ 1, ], 'dtype': float }
###  even_se_oot_norm: { 'dim': [ 1, ], 'dtype': float }

  # centroid related features
##  global_centr_view_std_noclip: { 'dim': [ 301, 1 ], 'dtype': float }
  local_centr_view_std_noclip: { 'dim': [ 31, 1 ], 'dtype': float }
  local_centr_view_std_noclip_var: { 'dim': [ 31, 1 ], 'dtype': float }
#  tce_fwm_stat_norm: { 'dim': [ 1, ], 'dtype': float }

  # secondary related features
##  # local_weak_secondary_view_fluxnorm: {'dim': [31, 1], 'dtype': float}
  local_weak_secondary_view_selfnorm: { 'dim': [ 31, 1 ], 'dtype': float }
  local_weak_secondary_view_selfnorm_var: { 'dim': [ 31, 1 ], 'dtype': float }
###  local_weak_secondary_view_max_flux-wks_norm: { 'dim': [ 31, 1 ], 'dtype': float }
  tce_maxmes_norm: { 'dim': [ 1, ], 'dtype': float }
##  wst_depth_norm: { 'dim': [ 1, ], 'dtype': float }
  tce_albedo_stat_norm: { 'dim': [ 1, ], 'dtype': float }
  tce_ptemp_stat_norm: { 'dim': [ 1, ], 'dtype': float }
  flux_weak_secondary_local_stat_abs_min_norm: { 'dim': [ 1, ], 'dtype': float }

  # other diagnostic parameters
  tce_max_mult_ev_norm: { 'dim': [ 1, ], 'dtype': float }
  tce_max_sngle_ev_norm: { 'dim': [ 1, ], 'dtype': float }
  tce_robstat_norm: { 'dim': [ 1, ], 'dtype': float }
  tce_model_chisq_norm: { 'dim': [ 1, ], 'dtype': float }

 # bootstrap fa prob
  boot_fap_norm: { 'dim': [ 1, ], 'dtype': float }

 # ghost
  tce_cap_stat_norm: { 'dim': [ 1, ], 'dtype': float }
  tce_hap_stat_norm: { 'dim': [ 1, ], 'dtype': float }
 #    tce_cap_hap_stat_diff_norm: {'dim': [1,], 'dtype': float}

  # rolling band
#  tce_rb_tcount0n_norm: { 'dim': [ 1, ], 'dtype': float }

 # stellar parameters
  tce_sdens_norm: { 'dim': [ 1, ], 'dtype': float }
  tce_steff_norm: { 'dim': [ 1, ], 'dtype': float }
  tce_smet_norm: { 'dim': [ 1, ], 'dtype': float }
  tce_slogg_norm: { 'dim': [ 1, ], 'dtype': float }
  tce_smass_norm: { 'dim': [ 1, ], 'dtype': float }
  tce_sradius_norm: { 'dim': [ 1, ], 'dtype': float }
  # mag_norm: { 'dim': [ 1, ], 'dtype': float }
  # mag_cat: { 'dim': [ 1, ], 'dtype': int }
  # mag_cat_norm: { 'dim': [ 1, ], 'dtype': float }
  ruwe_norm: { 'dim': [ 1, ], 'dtype': float }
  mag_shift_norm: { 'dim': [ 1, ], 'dtype': float }

 # tce parameters
  tce_prad_norm: { 'dim': [ 1, ], 'dtype': float }
  tce_period_norm: { 'dim': [ 1, ], 'dtype': float }

  # difference image
  diff_imgs_std_trainset: { 'dim': [ 5, 33, 33 ], 'dtype': float }
  oot_imgs_std_trainset: { 'dim': [ 5, 33, 33 ], 'dtype': float }
#   diff_imgs_stdnorm: { 'dim': [ 5, 33, 33 ], 'dtype': float }
#   oot_imgs_stdnorm: { 'dim': [ 5, 33, 33 ], 'dtype': float }
  target_imgs: { 'dim': [ 5, 33, 33 ], 'dtype': float }
  quality: { 'dim': [ 5, 1], 'dtype': float }
  #  tce_dicco_msky_norm: { 'dim': [ 1, ], 'dtype': float }
  #  tce_dicco_msky_err_norm: { 'dim': [ 1, ], 'dtype': float }
  tce_dikco_msky_norm: { 'dim': [ 1, ], 'dtype': float }
  tce_dikco_msky_err_norm: { 'dim': [ 1, ], 'dtype': float }

  # momentum dump
  local_momentum_dump_view: { 'dim': [ 31, 1 ], 'dtype': float }
  local_momentum_dump_view_var: { 'dim': [ 31, 1 ], 'dtype': float }

  # flux trend
  flux_trend_global_norm: { 'dim': [ 301, 1 ], 'dtype': float }
  flux_trend_global_norm_var: { 'dim': [ 301, 1 ], 'dtype': float }
  flux_trend_global_stat_min_norm: { 'dim': [ 1, ], 'dtype': float }
  flux_trend_global_stat_max_norm: { 'dim': [ 1, ], 'dtype': float }

  # flux periodogram
  pgram_smooth_norm: { 'dim': [ 674, 1 ], 'dtype': float }
  pgram_tpm_smooth_norm: { 'dim': [ 674, 1 ], 'dtype': float }
  pgram_smooth_max_power_norm: { 'dim': [ 1, ], 'dtype': float }
  pgram_tpm_smooth_max_power_norm: { 'dim': [ 1, ], 'dtype': float }

  # mission flag
  # mission: { 'dim': [ 1, ], 'dtype': float }

# maps features' names to features names expected by the model
feature_map: null
#  feature_name: feature_name_model

training:
  data_augmentation: false  # perform online data augmentation
  online_preprocessing_params: # online data augmentation parameters
    'num_bins_global': 301
    'num_bins_local': 31
    'num_transit_dur': 5
  opt_metric: auc_pr
  batch_size: 32
  ce_weights: null
  category_weights: null
#    PC: 1.0
#    AFP: 1.0
#    NTP: 1.0
  shuffle_buffer_size: 29000  # should be larger than size of the training set to allow perfect sampling

label_field_name: label  # name of the label field in the TFRecord that is going to be used as the label

evaluation:
  batch_size: 32
inference:
  batch_size: 32

callbacks:
  train: null
#    early_stopping: null
#      monitor: val_auc_pr  # which metric to monitor for early stopping
#      min_delta: 0
#      patience: 20
#      verbose: 1
#      mode: max  # maximize/minimize monitored metric in early stopping
#      baseline: null
#      restore_best_weights: true
#    tensorboard: null
#      histogram_freq: 1
#      write_graph: true
#      write_images: false
#      update_freq: epoch
#      profile_batch: 2
#      embeddings_metadata: null
#      embeddings_freq: 0

label_map:
  # Kepler
  PC: 1
  AFP: 0
  NTP: 0
  # TESS
#  KP: 1
#  CP: 1
#  FP: 0
#  EB: 0
#  NTP: 0
#  NEB: 0
#  NPC: 0
#  BD: 0

metrics:
  'clf_thr': 0.5  # classification threshold
  'num_thr': 1000  # number of thresholds used to compute some metrics

datasets:  # datasets - same name convention as used for the TFRecords
  - train
#  - val
  - test

plot_model: true
write_model_summary: true
verbose_model: 2  # for fit, eval, predict functions
verbose: true  # general

configuration_space:
  hyperparameters: # hyperparameters to be optimized (they will overwrite hyperparameters set in config

    # optimization hyperparameters -------------------
    lr: # name (should match name expected in model function)
      type: uniform_float  # type of hyperparameter
      parameters:
        lower: 1.0e-6
        upper: 1.0e-1
        default_value: 1e-2
        log: true
#    optimizer:
#      type: categorical
#      parameters: [ 'Adam', 'SGD' ]
#    sgd_momentum:
#      type: uniform_float
#      parameters:
#        lower: 1.0e-3
#        upper: 0.99
#        default_value: 0.9
#        log: true

    #  batch_size:
    #    type: categorical
    #    parameters: [ 4, 8, 26, 32, 64, 128, 256 ]

    #    weight_initializer:
    #      type: categorical
    #      parameters: [ 'he', 'glorot' ]

    #    batch_norm:
    #      type: categorical
    #      parameters: [ true, false' ]

    #    non_lin_fn:
    #      type: categorical
    #      parameters: [ 'relu', 'prelu' ]

    # local branch hyperparameters ----------
    num_loc_conv_blocks:
      type: uniform_integer
      parameters:
        lower: 1
        upper: 5
        default_value: 2
    loc_conv_ls_per_block:
      type: uniform_integer
      parameters:
        lower: 1
        upper: 3
        default_value: 1
    init_loc_conv_filters:
      type: uniform_integer
      parameters:
        lower: 2
        upper: 6
        default_value: 4
    kernel_size_loc:
      type: uniform_integer
      parameters:
        lower: 1
        upper: 8
        default_value: 2
    pool_size_loc:
      type: categorical
      parameters: [ 2, 4, 8, 16 ]

    # global branch hyperparameters ------
    num_glob_conv_blocks:
      type: uniform_integer
      parameters:
        lower: 1
        upper: 5
        default_value: 3
    glob_conv_ls_per_block:
      type: uniform_integer
      parameters:
        lower: 1
        upper: 3
        default_value: 1
    init_glob_conv_filters:
      type: uniform_integer
      parameters:
        lower: 2
        upper: 6
        default_value: 4
    kernel_size_glob:
      type: uniform_integer
      parameters:
        lower: 1
        upper: 8
        default_value: 2
    pool_size_glob:
      type: categorical
      parameters: [2, 4, 8, 16]

    # periodogram branch hyperparameters -----
    num_pgram_conv_blocks:
      type: uniform_integer
      parameters:
        lower: 1
        upper: 5
        default_value: 3
    pgram_conv_ls_per_block:
      type: uniform_integer
      parameters:
        lower: 1
        upper: 3
        default_value: 1
    init_pgram_conv_filters:
      type: uniform_integer
      parameters:
        lower: 2
        upper: 6
        default_value: 4
    kernel_size_pgram:
      type: uniform_integer
      parameters:
        lower: 1
        upper: 8
        default_value: 2
    pool_size_pgram:
      type: categorical
      parameters: [ 2, 4, 8, 16 ]

    # difference image branch hyperparameters -----
    num_diffimg_conv_blocks:
      type: uniform_integer
      parameters:
        lower: 1
        upper: 5
        default_value: 3
    diffimg_conv_ls_per_block:
      type: uniform_integer
      parameters:
        lower: 1
        upper: 3
        default_value: 1
    init_diffimg_conv_filters:
      type: uniform_integer
      parameters:
        lower: 2
        upper: 6
        default_value: 4
    kernel_size_diffimg:
      type: uniform_integer
      parameters:
        lower: 1
        upper: 8
        default_value: 2
    pool_size_diffimg:
      type: categorical
      parameters: [ 2, 4, 8, 16 ]
    num_fc_diff_units:
      type: categorical
      parameters: [ 4, 8, 16 ]

    # shared conv hyperparameters ----
    dropout_rate_fc_conv:
      type: uniform_float
      parameters:
        lower: 1.0e-3
        upper: 2.0e-1
        default_value: 0.2
        log: true
    num_fc_conv_units:
      type: uniform_integer
      parameters:
        lower: 1
        upper: 8
        default_value: 8

    # fc block hyperparameters --------
    num_fc_layers:
      type: uniform_integer
      parameters:
        lower: 1
        upper: 4
        default_value: 2
    init_fc_neurons:
      type: categorical
      parameters: [ 32, 64, 128, 256, 512 ]
    dropout_rate:
      type: uniform_float
      parameters:
        lower: 1.0e-3
        upper: 2.0e-1
        default_value: 0.2
        log: true


  conditions: {}  # replace by empty dictionary `{}` if not using any condition
#    sgd_momentum:
#      type: equal
#      child: sgd_momentum
#      parent: optimizer
#      value: SGD
